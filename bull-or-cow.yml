---
- name: Check for bulls
  block:
    - name: First peg
      assert:
        that:
          - guesses[0] == pegs[0]
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg1

    - name: Second peg
      assert:
        that:
          - guesses[1] == pegs[1]
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg2

    - name: Third peg
      assert:
        that:
          - guesses[2] == pegs[2]
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg3

    - name: Fourth peg
      assert:
        that:
          - guesses[3] == pegs[3]
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: "peg4"

    - name: Compute bulls
      set_fact:
        bulls_list: "[{{ peg1.msg }}, {{ peg2.msg }}, {{ peg3.msg }}, {{ peg4.msg }}]"

    - name: Number of bulls
      set_fact:
        bulls: "{{ bulls_list | sum }}"

- name: Check for cows
  block:
    - name: First peg
      assert:
        that:
          - guesses[0] != pegs[0]
          - (guesses[0] == pegs[1] and guesses[1] != pegs[1])
             or (guesses[0] == pegs[2] and guesses[2] != pegs[2])
             or (guesses[0] == pegs[3] and guesses[3] != pegs[3])
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg1

    - name: Second peg
      assert:
        that:
          - guesses[1] != pegs[1]
          - (guesses[1] == pegs[0] and guesses[0] != pegs[0])
             or (guesses[1] == pegs[2] and guesses[2] != pegs[2])
             or (guesses[1] == pegs[3] and guesses[3] != pegs[3])
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg2

    - name: Third peg
      assert:
        that:
          - guesses[2] != pegs[2]
          - (guesses[2] == pegs[0] and guesses[0] != pegs[0])
             or (guesses[2] == pegs[1] and guesses[1] != pegs[1])
             or (guesses[2] == pegs[3] and guesses[3] != pegs[3])
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg3

    - name: Fourth peg
      assert:
        that:
          - guesses[3] != pegs[3]
          - (guesses[3] == pegs[0] and guesses[0] != pegs[0])
             or (guesses[3] == pegs[1] and guesses[1] != pegs[1])
             or (guesses[3] == pegs[2] and guesses[2] != pegs[2])
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg4

    - name: Compute cows
      set_fact:
        cows_list: "[{{ peg1.msg }}, {{ peg2.msg }}, {{ peg3.msg }}, {{ peg4.msg }}]"

    - name: Number of cows
      set_fact:
        cows: "{{ cows_list | sum }}"
