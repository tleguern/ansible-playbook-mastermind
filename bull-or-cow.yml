---
- name: Check for bulls
  block:
    - name: First peg
      assert:
        that:
          - __guess[0] == pegs["0"]
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg1

    - name: Second peg
      assert:
        that:
          - __guess[1] == pegs["1"]
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg2

    - name: Third peg
      assert:
        that:
          - __guess[2] == pegs["2"]
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg3

    - name: Fourth peg
      assert:
        that:
          - __guess[3] == pegs["3"]
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: "peg4"

    - name: Compute bulls
      set_fact:
        bulls_list: "[{{ peg1.msg }}, {{ peg2.msg }}, {{ peg3.msg }}, {{ peg4.msg }}]"

    - name: Number of bulls
      set_fact:
        bulls: "{{ bulls_list | sum }}"

- name: Check for cows
  block:
    - name: First peg
      assert:
        that:
          - __guess[0] != pegs["0"]
          - (__guess[0] == pegs["1"] and __guess[1] != pegs["1"])
             or (__guess[0] == pegs["2"] and __guess[2] != pegs["2"])
             or (__guess[0] == pegs["3"] and __guess[3] != pegs["3"])
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg1

    - name: Second peg
      assert:
        that:
          - __guess[1] != pegs["1"]
          - (__guess[1] == pegs["0"] and __guess[1] != pegs["0"])
             or (__guess[1] == pegs["2"] and __guess[2] != pegs["2"])
             or (__guess[1] == pegs["3"] and __guess[3] != pegs["3"])
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg2

    - name: Third peg
      assert:
        that:
          - __guess[2] != pegs["2"]
          - (__guess[2] == pegs["0"] and __guess[1] != pegs["0"])
             or (__guess[2] == pegs["1"] and __guess[2] != pegs["1"])
             or (__guess[2] == pegs["3"] and __guess[3] != pegs["3"])
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg3

    - name: Fourth peg
      assert:
        that:
          - __guess[3] != pegs["3"]
          - (__guess[3] == pegs["0"] and __guess[1] != pegs["0"])
             or (__guess[3] == pegs["1"] and __guess[1] != pegs["1"])
             or (__guess[3] == pegs["2"] and __guess[1] != pegs["2"])
        fail_msg: "0"
        success_msg: "1"
        quiet: yes
      failed_when: false
      register: peg4

    - name: Compute cows
      set_fact:
        cows_list: "[{{ peg1.msg }}, {{ peg2.msg }}, {{ peg3.msg }}, {{ peg4.msg }}]"

    - name: Number of cows
      set_fact:
        cows: "{{ cows_list | sum }}"
